import{_ as s,c as i,o as a,U as e}from"./chunks/framework.uUfiGZcz.js";const t="/encode-algorithms/assets/image.4PuvpyBf.png",h="/encode-algorithms/assets/image-1.2TAlxNWQ.png",n="/encode-algorithms/assets/image-2.mwpI6k4N.png",l="/encode-algorithms/assets/image-3.6p4cBoYi.png",d="/encode-algorithms/assets/image-4.gkY1rNSk.png",f=JSON.parse('{"title":"704. 二分查找","description":"","frontmatter":{},"headers":[],"relativePath":"easy/704. 二分查找.md","filePath":"easy/704. 二分查找.md"}'),p={name:"easy/704. 二分查找.md"},k=e('<h1 id="_704-二分查找" tabindex="-1"><a href="https://leetcode.cn/problems/binary-search/" target="_blank" rel="noreferrer">704. 二分查找</a> <a class="header-anchor" href="#_704-二分查找" aria-label="Permalink to &quot;[704. 二分查找](https://leetcode.cn/problems/binary-search/)&quot;">​</a></h1><h3 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h3><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code>  ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。 <img src="'+t+'" alt="alt text"></p><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><p>题目中给我们一个<strong>排序</strong>数组和一个目标值，然后找到这个目标值，返回对应的位置，如果没有找到则返回-1。这个我们就可以利用<strong>二分查找</strong>来解决那可就很简单了（不清楚二分的可以先去看看<a href="./../common/二分查找.html">二分查找</a>）。</p><h3 id="示例1" tabindex="-1">示例1 <a class="header-anchor" href="#示例1" aria-label="Permalink to &quot;示例1&quot;">​</a></h3><p>我们先用图来演示下示例1 首先我们需要两个指针：一个左边指针（开始起点）<code>left</code>,也就是数组的第一个索引&quot;0&quot;.一个右边指针（结束索引）<code>right</code>,也就是数组的最后一个索引<code>nums.length - 1</code>。同时我们还需要一个中间点<code>mid</code>. <img src="'+h+'" alt="alt text"></p><p>可以发现，<code>mid</code>是处在索引为2的地方，这是为什么呢？因为<code>left</code> 和<code>right</code>的索引的一半是<code>2.5</code>没有对应的索引，所以可以通过<code>Math.floor</code>解决这个问题。然后我们在通过<code>mid</code>对应的值和<code>target</code>的值进行对比。</p><ul><li>如果<code>mid</code>对应的值和<code>target</code>对应的值相等，说明找到了，则直接返回即可</li><li>如果<code>mid</code>对应的值小于<code>target</code>对应的值，说明<code>target</code>的值在<code>(mid, right]</code>这个区间内，则将<code>left</code>直接移动到<code>mid</code>的下一位</li><li>如果<code>mid</code>对应的值大于<code>target</code>对应的值，说明<code>target</code>的值在<code>[left, mid)</code>这个区间内，则将<code>right</code>直接移动到<code>mid</code>的上一位</li></ul><p>比如我们的这个案例中，<code>target</code>是9，<code>mid</code>对应的是3,所以需要改变<code>left</code>的位置。我们通过图来看下完整的过程</p><p><img src="'+n+'" alt="alt text"></p><p>当<code>mid</code>对应的值是9，和<code>target</code>一样的时候，则直接返回。</p><p>那如果没有找到呢？我们来看下示例2</p><h3 id="示例2" tabindex="-1">示例2 <a class="header-anchor" href="#示例2" aria-label="Permalink to &quot;示例2&quot;">​</a></h3><p>示例2中<code>target</code>变成了2.我们再来看下图</p><p><img src="'+l+'" alt="alt text"></p><p>当<code>mid</code>对应的值为3时，比<code>target</code>大，所以需要改变<code>right</code>的位置.<code>right</code>的位置确认后，我们就可以确认<code>mid</code>的位置，此时它和<code>left</code>的对应的值是一样的，比<code>target</code>小，所以需要改变<code>left</code>的位置。</p><p><img src="'+d+`" alt="alt text"></p><p>根据同样的步骤走完之后，此时<code>left</code>,<code>right</code>,<code>mid</code>，在同一个位置，但是还是没有找到<code>target</code>的值，而且<code>mid</code>对应的值比<code>target</code>小，,所以需要改变<code>left</code>的位置。这样的话，<code>left</code>就大于<code>right</code>了，那就不可能找到了，则return -1</p><h2 id="完整代码" tabindex="-1">完整代码 <a class="header-anchor" href="#完整代码" aria-label="Permalink to &quot;完整代码&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> search</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nums</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nums[mid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nums[mid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (nums[mid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,21),r=[k];function o(c,g,E,y,m,F){return a(),i("div",null,r)}const u=s(p,[["render",o]]);export{f as __pageData,u as default};
