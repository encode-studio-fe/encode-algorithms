import{_ as s,c as a,o as i,U as n}from"./chunks/framework.uUfiGZcz.js";const e="/encode-algorithms/assets/image.EmxGKugf.png",p="/encode-algorithms/assets/image-1.srFOeDNe.png",t="/encode-algorithms/assets/image-2.X-9nrYUM.png",l="/encode-algorithms/assets/image-3.4g9qSuuG.png",m=JSON.parse('{"title":"206. 反转链表","description":"","frontmatter":{},"headers":[],"relativePath":"easy/206. 反转链表.md","filePath":"easy/206. 反转链表.md"}'),h={name:"easy/206. 反转链表.md"},r=n('<h1 id="_206-反转链表" tabindex="-1"><a href="https://leetcode.cn/problems/reverse-linked-list/" target="_blank" rel="noreferrer">206. 反转链表</a> <a class="header-anchor" href="#_206-反转链表" aria-label="Permalink to &quot;[206. 反转链表](https://leetcode.cn/problems/reverse-linked-list/)&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><img src="'+e+'" alt="alt text"></p><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><p>其实这道题很好理解，我们拿一个例子表示：</p><p><img src="'+p+'" alt="alt text"> 比如我们需要将上图的链表进行反转，需要做的是将节点1的next指向节点1的前面的节点，但是节点1前面并没有节点，所以需要用到一个虚拟头节点（pre）.如图：</p><p><img src="'+t+'" alt="alt text"> 那现在就比较好操作了，定义一个虚拟头结点pre，头节点为cur，然后将cur的next节点指向pre节点，然后再将节点pre和cur往后移动一位，进行下一次反转</p><p><img src="'+l+`" alt="alt text"> 下面我们来看下代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reverseList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> head</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pre </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cur.next</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cur.next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pre</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pre </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cur</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pre</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>虚拟头节点为pre，头节点为cur,每一次循环则反转一个节点。首先记录下cur的下一个节点为next,然后将cur.next指向虚拟头节点pre,然后将pre和 cur往后移动。</p><p>当cur为null的时候说明链表已经到头了，则退出循环，直接返回pre即可。</p><p>还可以用es6的解构赋值优化一下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>var reverseList = function (head) {</span></span>
<span class="line"><span>  let pre = null</span></span>
<span class="line"><span>  let cur = head</span></span>
<span class="line"><span>  while (cur) {</span></span>
<span class="line"><span>    [cur.next, pre, cur] = [pre, cur, cur.next]</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return pre</span></span>
<span class="line"><span>};</span></span></code></pre></div>`,14),k=[r];function c(d,E,o,g,u,_){return i(),a("div",null,k)}const F=s(h,[["render",c]]);export{m as __pageData,F as default};
